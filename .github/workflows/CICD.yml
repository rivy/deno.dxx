name: CICD

# spell-checker:ignore (acronyms) CICD MSVC OSID musl
# spell-checker:ignore (env/flags) Awarnings BASHOPTS Ccodegen Coverflow Cpanic RUSTDOCFLAGS RUSTFLAGS Zpanic
# spell-checker:ignore (jargon) deps dequote SHAs softprops subshell toolchain
# spell-checker:ignore (names) CodeCov Cygwin Deno DenoLand GitHack JSdelivr MacOS MinGW
# spell-checker:ignore (people) Dawid Dziurla * dawidd6 , Roy Ivy III * rivy
# spell-checker:ignore (shell/tools) choco clippy dmake dpkg esac fakeroot gmake grcov halium lcov libssl mapfile mkdir popd printf pushd rustc rustfmt rustup shopt xargs
# spell-checker:ignore (misc) aarch alnum armhf bindir busytest coreutils getcwd gmsu gnueabihf issuecomment maint nullglob onexitbegin onexitend pell runtest tempfile testsuite uutils

env:
  PROJECT_NAME: dxx
  PROJECT_DESC: 'Enhanced Deno commands'
  PROJECT_AUTH: 'rivy'
  DENO_MIN_VER: '1.0.0'
  # * config
  BIN_FILE_GLOB: './source/[^$]*.ts ./source/bin/*.ts ./source/cli/*.ts ./src/[^$]*.ts ./src/bin/*.ts ./src/cli/*.ts'
  LIB_FILE_GLOB: './source/$mod.ts ./source/lib/$mod.ts ./src/lib/$mod.ts ./src/$mod.ts'
  # SRC_FILE_GLOB: './source/**/*.ts ./src/**/*.ts' ## note: double globstar not supported at CLI b/c MacOS includes only bash v3 which doesn't support double globstar
  #
  COMPILE_OPTIONS: '--allow-all --unstable'
  #
  CDN_PREFIX: 'https://cdn.jsdelivr.net/gh'
  #.or.# CDN_PREFIX: 'https://cdn.statically.io/gh'
  #.or.# CDN_PREFIX: 'https://rawcdn.githack.com'

on: [push, pull_request]

jobs:
  style:
    name: Style
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT; done; }
          # ...
      - name: Install/setup prerequisites
        shell: bash
        run: |
          ## Install/setup prerequisites
          # * pin installed cspell to v4.2.8 (cspell v5+ is broken for NodeJS < v12)
          ## maint: [2021-11-10; rivy] `cspell` version may be advanced to v5 when used with NodeJS >= v12
          sudo apt-get -y update ; sudo apt-get -y install npm ; sudo npm install cspell@4.2.8 -g ;
      - name: Install `deno` toolchain
        uses: denoland/setup-deno@v1
      - name: Install `dprint`
        shell: bash
        run: |
          dprint_version=0.45.1
          curl -fsSL https://dprint.dev/install.sh | sh -s ${dprint_version} > /dev/null 2>&1
          echo '/home/runner/.dprint/bin' >> $GITHUB_PATH
          # ref: GitHub Action ['dprint/check'](https://github.com/dprint/check)
      - name: Info
        shell: bash
        run: |
          ## Info
          # environment
          echo "## environment"
          # ref: <https://www.baeldung.com/linux/find-current-shell> @@ <https://archive.is/poU3Z>
          echo "SHELL='$(readlink /proc/$$/exe)'"
          echo "BASH_VERSION='${BASH_VERSION}'"
          echo "BASHOPTS='${BASHOPTS}'"
          echo "CI='${CI}'"
          # tooling info display
          echo "## tooling"
          deno --version
          npm --version
      - name: 'Dependency testing (`deno cache`)'
        if: success() || failure() # run regardless of prior step success/failure
        shell: bash
        run: |
          ## Dependency testing (`deno cache`)
          # * array of source files to test
          files=() ; while IFS= read -r line ; do files+=("${line}") ; done < <(shopt -s nullglob; x=(${BIN_FILE_GLOB}); for v in "${x[@]}"; do if test -f "$v"; then echo "$v" ; fi ; done)
          echo "[ files: ${files[@]} ]"
          for file in "${files[@]}"; do
            # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
            # * note: `perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print'` removes ANSI escapes; ref: <https://stackoverflow.com/questions/17998978/removing-colors-from-output>
            S=$(deno cache "${file}" 2>&1) && printf "%s\n" "$S" || { printf "%s\n" "$S" ; printf "%s\n" "$S" | perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print' | sed -E -n -e '/^error:/{' -e "N; s/^error:[[:space:]]+(.*)\n[[:space:]]+at file:[/][/]${PWD////\\/}[/](.*):([0-9]+):([0-9]+).*$/::error file=\2,line=\3::ERROR: \`deno cache\`: dependency missing (file:'\2', line:\3)/p" -e '}' ; exit 1 ; }
          done
      - name: Format testing (`dprint check`)
        if: success() || failure() # run regardless of prior step success/failure
        shell: bash
        run: |
          # Format testing (`dprint check`)
          # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
          # * note: `perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print'` removes ANSI escapes; ref: <https://stackoverflow.com/questions/17998978/removing-colors-from-output>
          S=$(dprint check 2>&1) && printf "%s\n" "$S" || { printf "%s\n" "$S" | perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print' | perl -ne 'BEGIN { $errs = q//; }; print; if (m/^Error\s+formatting\s+\Q$ENV{PWD}\E\/(.*).\s+Message/) { $errs .= qq{::error file=$1::ERROR: \`dprint check\`: formatting error (file:\x27$1\x27; correct the syntax error)\n}; $file = q{}; } ; $file = $1 if /^from\s+\Q$ENV{PWD}\E\/(.*):\s*$/; ($errs .= qq{::error file=$file,line=$1::ERROR: \`dprint check\`: style violation (file:\x27$file\x27, line:$1; use \`dprint fmt -- \x27$file\x27\`)\n}) if length($file) && m/^(\d+)\|/; END { print qq/$errs/; }' ; exit 1 ; }
      - name: 'Lint testing (`deno lint`)'
        if: success() || failure() # run regardless of prior step success/failure
        shell: bash
        run: |
          ## Lint testing (`deno lint`)
          # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
          # * note: `deno lint` returns UNC paths under WinOS (including Cygwin and MSys) requiring platform-specific PWD handling
          S=$(deno lint 2>&1) && printf "%s\n" "$S" || { printf "%s\n" "$S" | perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print' | perl -ne 'BEGIN { $errs = q//; $_=$ENV{PWD}; if ($^O =~ m/Cygwin|MSWin32|MSys/i) { s#^/([A-Za-z])/#"//?/".uc($1).":/"#e; s#/#\\#g; } ; $PWD=$_; print qq{PWD=$PWD\n}; }; print; if (m/^Error\s+linting:\s+\Q$PWD\E[\\\/](.*)$/) { $errs .= qq{::error file=$1::ERROR: \`deno lint\`: linting error (file:\x27$1\x27; correct the syntax error)\n}; $file = q{}; } ; $error = $1 if /^([(].*)$/; ($errs .= qq{::error file=$1,line=$2::ERROR: \`deno lint\`: $error (file:\x27$1\x27, line:$2)\n}) if length($error) && m/\s*at\s+\Q$PWD\E[\\\/](.*):(\d+):\d+\s*$/; END { print qq/$errs/; }' ; exit 1 ; }
      - name: 'Spell-check testing (`cspell`)'
        if: success() || failure() # run regardless of prior step success/failure
        shell: bash
        run: |
          ## Spell-check testing (`cspell`)
          # * find cspell configuration ; note: avoid quotes around ${cfg_file} b/c `cspell` (v4) doesn't correctly dequote the config argument (or perhaps a subshell expansion issue?)
          cfg_files=($(shopt -s nullglob ; echo {.vscode,.}/{,.}c[sS]pell{.json,.config{.js,.cjs,.json,.yaml,.yml},.yaml,.yml} ;))
          cfg_file=${cfg_files[0]}
          unset CSPELL_CFG_OPTION ; if [ -n "$cfg_file" ]; then CSPELL_CFG_OPTION="--config $cfg_file" ; fi
          # * `cspell`
          ## maint: [2021-11-10; rivy] the `--no-progress` option for `cspell` is a `cspell` v5+ option
          # S=$(cspell ${CSPELL_CFG_OPTION} --no-summary --no-progress "**/*") && printf "%s\n" "$S" || { printf "%s\n" "$S" ; printf "%s" "$S" | sed -E -n "s/${PWD//\//\\/}\/(.*):(.*):(.*) - (.*)/::error file=\1,line=\2,col=\3::ERROR: \4 (file:'\1', line:\2)/p" ; exit 1 ; }
          S=$(cspell ${CSPELL_CFG_OPTION} --no-summary "**/*") && printf "%s\n" "$S" || { printf "%s\n" "$S" ; printf "%s" "$S" | sed -E -n "s/${PWD//\//\\/}\/(.*):(.*):(.*) - (.*)/::error file=\1,line=\2,col=\3::ERROR: \4 (file:'\1', line:\2)/p" ; exit 1 ; }
      - name: '[Style tests]'
        shell: bash
        run: |
          deno test --allow-all tests/00.project.style.test.ts

  build:
    name: Build
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
    outputs:
      ARTIFACTS: ${{ steps.vars.outputs.ARTIFACTS }}
      DEPLOY: ${{ steps.vars.outputs.DEPLOY }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # pull full repository (enables `git` branch/describe operations and testing)
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT; done; }
          # ...
          # staging directory
          STAGING='.staging'
          outputs STAGING
          # determine EXE suffix
          EXE_suffix="" ; case '${{ matrix.job.target }}' in *-pc-windows-*) EXE_suffix=".exe" ;; esac;
          outputs EXE_suffix
          # parse commit reference info
          echo GITHUB_REF=${GITHUB_REF}
          echo GITHUB_SHA=${GITHUB_SHA}
          REF_NAME=${GITHUB_REF#refs/*/}
          unset REF_BRANCH ; case "${GITHUB_REF}" in refs/heads/*) REF_BRANCH=${GITHUB_REF#refs/heads/} ;; esac;
          unset REF_TAG ; case "${GITHUB_REF}" in refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;; esac;
          REF_SHA=${GITHUB_SHA:0:10}
          outputs REF_NAME REF_BRANCH REF_TAG REF_SHA
          # package name
          PKG_suffix=".tar.gz" ; case '${{ matrix.job.target }}' in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          PKG_BASENAME=${PROJECT_NAME}-${REF_TAG:-$REF_SHA}-${{ matrix.job.target }}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          outputs PKG_suffix PKG_BASENAME PKG_NAME
          # deployable tag? (ie, leading "vM" or "M" optionally followed by extra version text (`[-.].*`); M == version number)
          unset DEPLOY ; if [[ $REF_TAG =~ ^[vV]?[0-9]+([-.].*)?$ ]]; then DEPLOY='true' ; fi
          outputs DEPLOY
          # produces artifacts?
          unset ARTIFACTS
          # * array of "binary" files
          files=() ; while IFS= read -r line ; do files+=("${line}") ; done < <(shopt -s nullglob; x=(${BIN_FILE_GLOB}); for v in "${x[@]}"; do if test -f "$v"; then echo "$v" ; fi ; done)
          echo "[ files: ${files[@]} ]"
          if [ -n "${files}" ]; then ARTIFACTS='true' ; fi
          outputs ARTIFACTS
      - name: Create all needed build/work directories
        # if: steps.vars.outputs.ARTIFACTS
        shell: bash
        run: |
          ## Create build/work space
          mkdir -p '${{ steps.vars.outputs.STAGING }}'
          mkdir -p '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/bin'
      - name: Install `deno` toolchain
        uses: denoland/setup-deno@v1
      - name: Info
        shell: bash
        run: |
          ## Info
          # environment
          echo "## environment"
          # ref: <https://www.baeldung.com/linux/find-current-shell> @@ <https://archive.is/poU3Z>
          echo "SHELL='$(readlink /proc/$$/exe)'"
          echo "BASH_VERSION='${BASH_VERSION}'"
          echo "BASHOPTS='${BASHOPTS}'"
          echo "CI='${CI}'"
          # tooling info display
          echo "## tooling"
          deno --version
          # dependencies
          echo "## dependency list"
          # * array of "binary" and "library" source files
          files=() ; while IFS= read -r line ; do files+=("${line}") ; done < <(shopt -s nullglob; x=(${BIN_FILE_GLOB} ${LIB_FILE_GLOB}); for v in "${x[@]}"; do if test -f "$v"; then echo "$v" ; fi ; done)
          echo "[ files: ${files[@]} ]"
          for file in "${files[@]}"; do
            deno info "${file}"
          done
      - name: '`deno test`'
        shell: bash
        run: |
          ## `deno test`
          # * note: `deno test` with coverage data generation
          deno test --allow-all --coverage=.coverage
          # * generate LCOV coverage data file
          deno coverage --lcov --exclude="test[.](js|mls|ts|jsx|tsx)$" --exclude="tests/**" .coverage > .coverage/@coverage-raw.lcov
          cat .coverage/@coverage-raw.lcov | perl -pe 'use Cwd; $cwd = getcwd(); $cwd =~ s/[\\\/]/[\\\\\\\/]/gmsu; s/^SF:${cwd}[\\\/]/SF:/gmsu;' > .coverage/@coverage.lcov
      - name: 'Push coverage to CodeCov'
        shell: bash
        run: |
          ## Push coverage to CodeCov
          mkdir -p .coverage/bin
          CODECOV_OSID="linux"
          case '${{ matrix.job.os }}' in
            macos-*) CODECOV_OSID='macos' ;;
            windows-*) CODECOV_OSID='windows' ;;
          esac;
          curl -L "https://uploader.codecov.io/latest/${CODECOV_OSID}/codecov${{ steps.vars.outputs.EXE_suffix }}" -o .coverage/bin/codecov
          chmod +x .coverage/bin/codecov
          ls -Al
          ls -Al .coverage/bin/
          # deno coverage --lcov --exclude="test[.](js|mls|ts|jsx|tsx)$" --exclude="tests/**" .coverage | perl -pe 'use Cwd; $cwd = getcwd(); $cwd =~ s/[\\\/]/[\\\\\\\/]/gmsu; s/^SF:${cwd}\\/SF:/gmsu;' > .coverage/@coverage.lcov
          .coverage/bin/codecov --verbose --file .coverage/@coverage.lcov
      - name: '`deno compile`'
        if: steps.vars.outputs.ARTIFACTS
        shell: bash
        run: |
          ## Compile
          # * array of "binary" files
          files=() ; while IFS= read -r line ; do files+=("${line}") ; done < <(shopt -s nullglob; x=(${BIN_FILE_GLOB}); for v in "${x[@]}"; do if test -f "$v"; then echo "$v" ; fi ; done)
          echo "[ files: ${files[@]} ]"
          for file in "${files[@]}"; do
            name="${file##*/}"
            basename="${name%%.*}"
            target="${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/bin/${basename}${{ steps.vars.outputs.EXE_suffix }}"
            echo "[ target='${target}' ]"
            # NOTE: a duplicate basename will overwrite any earlier compilation
            # * compile from CDN; makes best efforts to maintain project/script context (ie, for `import.meta.url`)
            deno compile ${COMPILE_OPTIONS} -o "${target}" "${CDN_PREFIX}/${GITHUB_REPOSITORY}@${GITHUB_SHA:0:10}/${file}" ## jsdelivr
            # deno compile ${COMPILE_OPTIONS} -o "${target}" "${CDN_PREFIX}/${GITHUB_REPOSITORY}/${GITHUB_SHA:0:10}/${file}" ## statically/githack
          done
      - name: Package
        if: steps.vars.outputs.ARTIFACTS
        shell: bash
        run: |
          ## Package artifact(s)
          # # `strip` binary (if needed)
          # if [ -n "${{ steps.vars.outputs.STRIP }}" ]; then "${{ steps.vars.outputs.STRIP }}" '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' ; fi
          # README and LICENSE
          # * spell-checker:ignore EADME ICENSE
          (shopt -s nullglob; for f in [R]"EADME"{,.*}; do cp $f '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/' ; done)
          (shopt -s nullglob; for f in [L]"ICENSE"{-*,}{,.*}; do cp $f '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/' ; done)
          # core compressed package
          pushd '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}' >/dev/null
          case '${{ matrix.job.target }}' in
            *-pc-windows-*) 7z -y a '../${{ steps.vars.outputs.PKG_NAME }}' * | tail -2 ;;
            *) tar czf '../${{ steps.vars.outputs.PKG_NAME }}' * ;;
          esac
          popd >/dev/null
      - name: Reserve artifacts # (ephemeral storage; for up to 90 days)
        if: steps.vars.outputs.ARTIFACTS
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.job.target }}
          path: ${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_NAME }}

  publish:
    name: Publish
    needs: [build, style]
    if: needs.build.outputs.DEPLOY
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
    steps:
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          outputs() { step_id="vars"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo ::set-output name=${var}::${!var}; done; }
          # ...
          # from 'build'
          ARTIFACTS='${{ needs.build.outputs.ARTIFACTS }}'
          DEPLOY='${{ needs.build.outputs.DEPLOY }}'
          outputs ARTIFACTS DEPLOY
          # staging directory
          STAGING='.staging'
          outputs STAGING
          # determine EXE suffix
          EXE_suffix="" ; case '${{ matrix.job.target }}' in *-pc-windows-*) EXE_suffix=".exe" ;; esac;
          outputs EXE_suffix
          # parse commit reference info
          echo GITHUB_REF=${GITHUB_REF}
          echo GITHUB_SHA=${GITHUB_SHA}
          REF_NAME=${GITHUB_REF#refs/*/}
          unset REF_BRANCH ; case "${GITHUB_REF}" in refs/heads/*) REF_BRANCH=${GITHUB_REF#refs/heads/} ;; esac;
          unset REF_TAG ; case "${GITHUB_REF}" in refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;; esac;
          REF_SHA=${GITHUB_SHA:0:10}
          outputs REF_NAME REF_BRANCH REF_TAG REF_SHA
          # package name
          PKG_suffix=".tar.gz" ; case '${{ matrix.job.target }}' in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          PKG_BASENAME=${PROJECT_NAME}-${REF_TAG:-$REF_SHA}-${{ matrix.job.target }}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          outputs PKG_suffix PKG_BASENAME PKG_NAME
      - name: Create all needed build/work directories
        if: steps.vars.outputs.ARTIFACTS
        shell: bash
        run: |
          ## Create build/work space
          mkdir -p '${{ steps.vars.outputs.STAGING }}'
      - name: Retrieve artifacts
        if: steps.vars.outputs.ARTIFACTS
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PROJECT_NAME }}-${{ matrix.job.target }}'
          path: '${{ steps.vars.outputs.STAGING }}'
      - name: Publish
        if: steps.vars.outputs.ARTIFACTS && steps.vars.outputs.DEPLOY
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.vars.outputs.STAGING }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
